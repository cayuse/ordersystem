Monthlyinvitem.all.each do |invitem|

p *Monthlyinvitem.find_all_by_price_id(nil)

Monthlyinvitem.find_all_by_price_id(nil).each do |invitem|

date = invitem.monthlyinv.monthlyinvreq.month
invitem.price ||= invitem.item.price_on_date date
#puts "price was #{invitem.price.id}"
invitem.save!
end;1


inv = Monthlyinv.find 246
mess = inv.monthlyinvitems.inject({}) {|hsh, itm| hsh[itm.item] ||= []; hsh[itm.item].push itm; hsh} ;1
lengths = mess.keys.map {|m| mess[m].length} ;1

mess.keys.each do |key|
    if mess[key].length > 1
        len = mess[key].length - 1
        (1..len).each do |i|
            mess[key][i].destroy
        end
    end
end;1




http://ryandaigle.com/articles/2008/3/31/what-s-new-in-edge-rails-dirty-objects

*** Signoff: _grepper ()
<seebs> What I want, basically, is if they filled out a form and hit a submit button, I want to go back to submitting the form with the provided data as though it hadn't
        needed to be intercepted.
<cayuse> so is referrer available to the controller/
<cayuse> ?
<hakunin> seebs: but yuo don't want to submit the form - you want to display it prepopulated
<seebs> No, I want to submit it.
<seebs> I want to do exactly what would have happened if the user had been adequately logged in.
<cayuse> like can a controller action do something like   referrer ? redirect_to(referrer) : redirect_to(edit_model_path(model))        is that correcti?
<mikeric:#ruby> when installing ruby/rubygems/etc. with macports on leopard, i should be removing the ones bundles with the OS, right?
<seebs> cayuse:  I don't know.  Might be sorta neat if you could do that, contingent on it being available.
<hakunin> cayuse: yes, request.referer
<cayuse> seebs: your question is hopefully an answer to one of my problems :)
<cayuse> hakunin: thanks
*** Signoff: zerod (Read error: 104 (Connection reset by peer))
<seebs> I can do it in the cases where the request isn't a post.  I can't seem to make it work if the request was a post.
<hakunin> cayuse: if you only jumping one step, you can do redirect_to :back




checkboxing all in a class
<%= check_box_tag 'toggle' , 'toggle', false, :onclick => "toggleAll('sitetype');return false;"%>
<%= check_box_tag 'toggle' , 'toggle', false, :onclick => "toggleAll('day');return false;"%>


jQuery in Action.

## for prawn

pdf.start_new_page

id probably do [1, 2, 3, 4, 5].zip([2, 3, 4, 5, 6], [3, 4, 5, 6, 7]).map &:sum

## get all used weeks, with sitetypes shown
group = {}
a = Weeklyorderreq.all.collect(&:week).flatten.uniq
a.each{|w| group[w] = Weeklyorderreq.find_all_by_week(w)}

## test output for above group.each_key {|a| puts a; group[a].each{|b| puts b.sitetype.name}}



##Get all quantities for a given week
c = Weeklyorderreq.find_all_by_week(Date.parse("2009-03-02").monday)
d = c.map{|w| w.weeklydfcorders}.flatten.uniq
a = d.map{|o| o.orderitems}.flatten

hash = {}
a.each do |obj|
hash[obj.item.id] ||= ["",0,0,0,0,0]
hash[obj.item.id][0] = obj.item.name
hash[obj.item.id][1] += obj.mon
hash[obj.item.id][2] += obj.tue
hash[obj.item.id][3] += obj.wed
hash[obj.item.id][4] += obj.thu
hash[obj.item.id][5] += obj.fri
end

data = hash.values


m = a.inject({}) do |acc, obj|
newOrder = acc[obj.item] || Orderitem.new
acc.merge!({obj.item => Orderitem.new.add!(newOrder)})
end


prawn

  def self.get_itemtypes
    "Class method"
    usage = Usage.find(1)
    usage.itemtype_ids
  end

@items = Item.find_all_by_itemtype_id(Weeklyorder::VALID_ITEM_TYPES, :include=>:sitetypes, :conditions=>["sitemizations.sitetype_id = ?", @site.sitetype])


monday = Date.parse(params[:date][:selected]).monday


### complex forms part 1
# projects_controller.rb
def new
  @project = Project.new
  3.times { @project.tasks.build }
end

def create
  @project = Project.new(params[:project])
  if @project.save
    flash[:note] = "Successfully created project."
    redirect_to projects_path
  else
    render :action => 'new'
  end
end

# models/project.rb
def task_attributes=(task_attributes)
  task_attributes.each do |attributes|
    tasks.build(attributes)
  end
end
<!-- new.rhtml -->
<% form_for :project, :url => projects_path do |f| %>
  <p>
    Name: <%= f.text_field :name %>
  </p>
  <% for task in @project.tasks %>
    <% fields_for "project[task_attributes][]", task do |task_form| %>
      <p>
        Task: <%= task_form.text_field :name %>
      </p>
    <% end %>
  <% end %>
  <p><%= submit_tag "Create Project" %></p>
<% end %>


### Complex Forms Part 2

<!-- layouts/application.rhtml -->
<%= javascript_include_tag :defaults %>

<!-- projects/new.rhtml -->
<div id="tasks">
  <%= render :partial => 'task', :collection => @project.tasks %>
</div>
<p><%= add_task_link "Add a task" %></p>

<!-- projects/_task.rhtml -->
<div class="task">
<% fields_for "project[task_attributes][]", task do |task_form| %>
  <p>
    Task: <%= task_form.text_field :name %>
    <%= link_to_function "remove", "$(this).up('.task').remove()" %>
  </p>
<% end %>
</div>
# projects_helper.rb
def add_task_link(name)
  link_to_function name do |page|
    page.insert_html :bottom, :tasks, :partial => 'task', :object => Task.new
  end
end

### Complex Forms Part 3

<!-- projects/edit.rhtml -->
<% form_for :project, :url => project_path(@project), :html => { :method => 'put' } do |f| %>
  <%= render :partial => 'fields', :locals => { :f => f } %>
  <p><%= submit_tag "Update Project" %></p>
<% end %>

<!-- projects/new.rhtml -->
<% form_for :project, :url => projects_path do |f| %>
  <%= render :partial => 'fields', :locals => { :f => f } %>
  <p><%= submit_tag "Create Project" %></p>
<% end %>

<!-- projects/_fields.rhtml -->
<p>
  Name: <%= f.text_field :name %>
</p>
<div id="tasks">
  <%= render :partial => 'task', :collection => @project.tasks %>
</div>
<p><%= add_task_link "Add a task" %></p>


<!-- projects/_task.rhtml -->
<div class="task">
  <% fields_for_task(task) do |task_form| %>
  <p>
    Task: <%= task_form.text_field :name %>
    <%= link_to_function "remove", "$(this).up('.task').remove()" %>
  </p>
  <% end %>
</div>
# models/project.rb
class Project < ActiveRecord::Base
  has_many :tasks, :dependent => :destroy

  validates_presence_of :name
  validates_associated :tasks
  
  after_update :save_tasks

  def new_task_attributes=(task_attributes)
    task_attributes.each do |attributes|
      tasks.build(attributes)
    end
  end
  
  def existing_task_attributes=(task_attributes)
    tasks.reject(&:new_record?).each do |task|
      attributes = task_attributes[task.id.to_s]
      if attributes
        task.attributes = attributes
      else
        tasks.delete(task)
      end
    end
  end
  
  def save_tasks
    tasks.each do |task|
      task.save(false)
    end
  end
end


# models/task.rb
class Task < ActiveRecord::Base
  belongs_to :project
  validates_presence_of :name
end


# projects_controller.rb
def new
  @project = Project.new
  @project.tasks.build
end

def create
  @project = Project.new(params[:project])
  if @project.save
    flash[:note] = "Successfully created project and tasks."
    redirect_to projects_path
  else
    render :action => 'new'
  end
end

def edit
  @project = Project.find(params[:id])
end

def update
  params[:project][:existing_task_attributes] ||= {}
  
  @project = Project.find(params[:id])
  if @project.update_attributes(params[:project])
    flash[:note] = "Successfully updated project and tasks."
    redirect_to project_path(@project)
  else
    render :action => 'edit'
  end
end


# projects_helper.rb
def fields_for_task(task, &block)
  prefix = task.new_record? ? 'new' : 'existing'
  fields_for("project[#{prefix}_task_attributes][]", task, &block)
end

def add_task_link(name) 
  link_to_function name do |page| 
    page.insert_html :bottom, :tasks, :partial => 'task', :object => Task.new 
  end 
end <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<title>Untitled Document</title>
<script src="javascripts/SpryTabbedPanels.js" type="text/javascript"></script>
<link href="stylesheets/SpryTabbedPanels.css" rel="stylesheet" type="text/css" />
</head>

<body>
<div id="TabbedPanels1" class="TabbedPanels">
  <ul class="TabbedPanelsTabGroup">
    <li class="TabbedPanelsTab" tabindex="0">Tab 1</li>
    <li class="TabbedPanelsTab" tabindex="1">Tab 2</li>
  </ul>
  <div class="TabbedPanelsContentGroup">
    <div class="TabbedPanelsContent">Content 1</div>
    <div class="TabbedPanelsContent">Content 2</div>
  </div>
</div>
<script type="text/javascript">
<!--
var TabbedPanels1 = new Spry.Widget.TabbedPanels("TabbedPanels1");
//-->
</script>
</body>
</html>


require 'find'
require 'MP4Info'
require 'id3lib'

  Find.find("/Volumes/somePath") do |path|
    if FileTest.file?(path)
    end
  end


require 'iconv'
utf8_csv = File.open("testdata.txt").read
ansi_csv = Iconv.iconv('utf-8', 'ISO-8859-1', IO.readlines("tetsdata.txt")

File.open("testdata.txt", "w") { |f| f.puts ansi_csv }

4char code
 Name
 Class/Flag
 Appearance
 
©alb
 Album
 1
 text
 iTunes 4.0
 
©art
 Artist
 1
 text
 iTunes 4.0
 
aART
 Album Artist
 1
 text
 ??
 
©cmt
 Comment
 1
 text
 iTunes 4.0
 
©day
 Year
 1
 text
 iTunes 4.0
 
©nam
 Title
 1
 text
 iTunes 4.0
 
©gen | gnre
 Genre
 1 | 0 1
 text | uint8
 iTunes 4.0
 
trkn
 Track number
 0
 uint8
 iTunes 4.0
 
disk
 Disk number
 0
 uint8
 iTunes 4.0
 
©wrt
 Composer
 1
 text
 iTunes 4.0
 
©too
 Encoder
 1
 text
 iTunes 4.0
 
tmpo
 BPM
 21
 uint8
 iTunes 4.0
 
cprt
 Copyright
 1
 text
 ? iTunes 4.0
 
cpil
 Compilation
 21
 uint8
 iTunes 4.0
 
covr
 Artwork
 13 | 14 2
 jpeg | png
 iTunes 4.0
 
rtng
 Rating/Advisory
 21
 uint8
 iTunes 4.0
 
©grp
 Grouping
 1
 text
 iTunes 4.2
 
stik
 ?? (stik)
 21
 uint8
 ??
 
pcst
 Podcast
 21
 uint8
 iTunes 4.9
 
catg
 Category
 1
 text
 iTunes 4.9
 
keyw
 Keyword
 1
 text
 iTunes 4.9
 
purl
 Podcast URL
 21 | 0 4
 uint8
 iTunes 4.9
 
egid
 Episode Global Unique ID
 21 | 0 4
 uint8
 iTunes 4.9
 
desc
 Description
 1
 text
 iTunes 5.0
 
©lyr
 Lyrics
 1 3
 text
 iTunes 5.0
 
tvnn
 TV Network Name
 1
 text
 iTunes 6.0
 
tvsh
 TV Show Name
 1
 text
 iTunes 6.0
 
tven
 TV Episode Number
 1
 text
 iTunes 6.0
 
tvsn
 TV Season
 21
 uint8
 iTunes 6.0
 
tves
 TV Episode
 21
 uint8
 iTunes 6.0
 
purd
 Purchase Date
 1
 text
 iTunes 6.0.2
 
pgap
 Gapless Playback
 21
 uin8
 iTunes 7.0
 
